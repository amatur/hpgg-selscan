// SLiM script for background selection simulation
// requires SLiM version 3.6 or later
// use the "burnin.trees" output for analysis, 10N burn-in

initialize() {
    initializeSLiMOptions(keepPedigrees=T);
    initializeTreeSeq();

    defineConstant("outputPathPrefix", "../output/2_1_bgs_burnin/");
    defineConstant("d_sel", 0.1);
    defineConstant("d_chr", 1000); // 10 Mb 10000000
    defineConstant("d_rr", 1e-8);
    defineConstant("d_mr", 1.29e-8); // mutation rate per base per generation
    defineConstant("d_ne", 10000); 
    defineConstant("BURN_IN", 100000); // burn in 10*Ne

    initializeMutationRate(d_mr);     // uniform mutation rate of d_mr
    
    // -- NEUTRAL + BACKGROUND SELECTION PARAMETERS --
    initializeMutationType("m1", 0.5, "f", 0.0);             // m1 mutation type: neutral
    initializeMutationType("m2", 0.1, "g", -d_sel, 0.2);     // m2 mutation type: recessive negative selection with gamma distribution of mean 0.1 and shape 0.2

    // g1 genome element type is an intron, 10% of mutations are deleterious
    initializeGenomicElementType("g1", c(m1,m2), c(9,1)); //10% of mutations are deleterious (m2), 90% are neutral (m1)
    initializeGenomicElement(g1, 0, d_chr - 1);   // uniform chromosome of length d_chr in bases

    initializeRecombinationRate(d_rr); // uniform recombination rate d_rr
}


1 early(){
  defineConstant("simID", getSeed());
  sim.addSubpop("p1", d_ne); 
}

BURN_IN late() { // run to generation 10Ne, Burn-in phase to allow the population to equilibrate 
    prefix = outputPathPrefix + "burnin";
    cat("prefix: "+ prefix + "\n");
    sim.treeSeqOutput(prefix + ".trees");           //output the final burnin tree

    //optional: save the state of the simulation
    //sim.outputFull(outputPathPrefix+"/slim_" + simID + ".txt"); // save the state of the simulation
}

