// SLiM script for constant neutral model simulation
// does not require recap
// requires SLiM version 3.6 or later
// use any of the output trees for analysis

initialize() {
initializeSLiMOptions(keepPedigrees=T);
    initializeTreeSeq();

    defineConstant("outputPathPrefix", "../output/2_2_bgs_neutral/");
    defineConstant("d_chr", 1000); // 10 Mb 10000000
    defineConstant("d_rr", 1e-8);
    defineConstant("d_mr", 1.29e-8); // mutation rate per base per generation
    defineConstant("d_ne", 10000); 
    defineConstant("BURN_IN", 100000); // burn in 10*Ne
    defineConstant("d_sel", 0.1);
    
    initializeMutationRate(d_mr);     // uniform mutation rate of d_mr
    
    // -- NEUTRAL + BACKGROUND SELECTION PARAMETERS --
    initializeMutationType("m1", 0.5, "f", 0.0);             // m1 mutation type: neutral
    initializeMutationType("m2", 0.1, "g", -d_sel, 0.2);     // m2 mutation type: recessive negative selection with gamma distribution of mean 0.1 and shape 0.2

    // g1 genome element type is an intron, 10% of mutations are deleterious
    initializeGenomicElementType("g1", c(m1,m2), c(9,1)); //10% of mutations are deleterious (m2), 90% are neutral (m1)
    initializeGenomicElement(g1, 0, d_chr - 1);   // uniform chromosome of length d_chr in bases

    initializeRecombinationRate(d_rr); // uniform recombination rate d_rr
}


1 early()  {
    sim.readFromPopulationFile("../output/2_1_bgs_burnin/burnin.trees");
}


late() {
    if (any(sampleTimes == community.tick)) {
        prefix = outputPathPrefix + "gen" + community.tick;
        sim.treeSeqOutput(prefix + ".trees");
        cat("Output at gen " + community.tick + ": " + prefix + ".trees\n");

        // Look for neutral mutations at particular frequency
        // for (mut in sim.mutations) {
        //     count = 0;
        //     for (genome in sim.subpopulations.genomes) {
        //         if (genome.containsMutations(mut)) {
        //             count = count + 1;
        //         }
        //     }
        //     freq = count / sim.subpopulations.genomes.size();
        //     if (freq >= 0 & freq <= 1) {
        //         cat("Mutation " + mut.id + " at position " + mut.position + " has frequency: " + freq + "\n");
        //     }
        // }
    }

    if (community.tick == MAX_GEN) {
        cat("Reached MAX_GEN = " + MAX_GEN + "\n");
        sim.simulationFinished();
    }
}

// Dummy callback at final generation to keep SLiM alive
MAX_GEN late() {
    // Nothing here â€” this ensures SLiM keeps running until gen 11000
}